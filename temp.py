import tensorflow as tf

if __name__ == "__main__":
    # sess = tf.Session()
    # a = tf.constant([0.0,1.0,0.0])
    # k = tf.constant([0.0, 1.0, 0.0])
    # b = tf.constant([[0.0,0.0,1.0], [0.0,1.0,0.0], [1.0,0.0,0.0]])
    # c = tf.where(tf.equal(a, 0.1))
    # none = tf.constant([])
    # d = tf.gather_nd(b, c)
    # f = tf.nn.embedding_lookup(b, c)
    # entropy = tf.nn.softmax_cross_entropy_with_logits(logits=d, labels=d)
    # labels = tf.constant([0, 1, 2, 3, 3])
    # equality_matrix = tf.equal(tf.reshape(labels, [-1, 1]), labels)
    # equality_matrix = tf.cast(equality_matrix, tf.float32)
    # p_target = (equality_matrix / tf.reduce_sum(equality_matrix, [1], keep_dims=True))
    # #g = tf.reduce_mean(entropy)
    # g = tf.reduce_mean(0.0)
    # #g = tf.cond(tf.equal(tf.size(entropy), 0), lambda: tf.constant(0.0), lambda: g)
    # #print(sess.run(entropy))
    # print(sess.run(tf.reshape(labels, [-1, 1])))
    # print()
    # print(sess.run(equality_matrix))
    # print()
    # print(sess.run(tf.reduce_sum(equality_matrix, [1], keep_dims=True)))
    # print()
    # print(sess.run(p_target))
    a = [1,2,3]
    print(a[:1])
    print(a[1:])
